*autolinker.txt*       Automatic links for any filetype (e.g. for a markdown/latex based wiki)
                Author: Thomas Link, micathom AT gmail com?subject=vim

Features:

    - Call |:Autolinkbuffer| to enable autolinker for the current buffer 
      or check the definitions of |g:autolinker_filetypes| and 
      |g:autolinker_patterns|.
    - Jump to files in the current directory
    - Jump to files in 'path'
    - Jump to tags
    - Jump to file URLs
    - Jump to line numbers (syntax: filename#123 where '123' is the line 
      number)
    - Jump to the first occurrence of a string (syntax: 
      filename#q=STRING)
    - Invoke URLs
    - Highlight potential hyperlinks (doesn't work with all filetypes)
    - Use a fallback command (e.g. create inexistent files)
    - Special support for markdown (incl. link maps), viki files
    - file URLs (an encoded URL starting with "file://") can be used to 
      circumvent encoding issues etc.

The default map is `gz` in normal and visual mode (see |g:autolinker#nmap| and 
|g:autolinker#xmap|). In insert mode, it is <c-cr> if the key is yet unmapped 
(see |g:autolinker#imap|).

Differences to |gf|:

    - Customizable & extensible
    - Supports several methods
    - Highlight some potential hyperlinks if possible
    - When there are multiple potential matches, users can select the right 
      file from a list


-----------------------------------------------------------------------
Install~

To install the vimball, edit the vba file and type: >

    :so %

See :help vimball for details.

To install from github, please use a plugin manager like enable_vim, pathogen, 
VAM, Vundle, NeoBundle, vim-plug, vim-unbundle etc.

This script requires tlib (vimscript #1863) to be installed -- see 
https://github.com/tomtom/tlib_vim.

Also available on https://github.com/tomtom/autolinker_vim

========================================================================
Contents~

        g:autolinker_filetypes ................ |g:autolinker_filetypes|
        g:autolinker_patterns ................. |g:autolinker_patterns|
        g:autolinker_exclude_filetypes_rx ..... |g:autolinker_exclude_filetypes_rx|
        :Albuffer ............................. |:Albuffer|
        :Algrep ............................... |:Algrep|
        :Alfind ............................... |:Alfind|
        prototype.CleanCFile
        prototype.IsInternalLink
        autolinker#ft_viki#GetInstance ........ |autolinker#ft_viki#GetInstance()|
        prototype.Dispatch
        prototype.BaseNameLinks
        prototype.Dirname
        prototype.Rootname
        prototype.Highlight
        prototype.Jump_system
        prototype.Jump_def
        prototype.Jump_path
        prototype.Jump_tag
        prototype.Jump_fallback
        autolinker#cfile#New .................. |autolinker#cfile#New()|
        prototype.CleanCFile
        prototype.CFile
        prototype.Pos
        prototype.CleanCFile
        prototype.JumpInternalLink
        prototype.IsInternalLink
        autolinker#ft_markdown#GetInstance .... |autolinker#ft_markdown#GetInstance()|
        g:autolinker#use_highlight ............ |g:autolinker#use_highlight|
        g:autolinker#url_rx ................... |g:autolinker#url_rx|
        g:autolinker#types .................... |g:autolinker#types|
        g:autolinker#nmap ..................... |g:autolinker#nmap|
        g:autolinker#imap ..................... |g:autolinker#imap|
        g:autolinker#xmap ..................... |g:autolinker#xmap|
        g:autolinker#map_forward .............. |g:autolinker#map_forward|
        g:autolinker#map_backward ............. |g:autolinker#map_backward|
        g:autolinker#map_options .............. |g:autolinker#map_options|
        g:autolinker#layout ................... |g:autolinker#layout|
        g:autolinker#edit_file ................ |g:autolinker#edit_file|
        g:autolinker#edit_dir ................. |g:autolinker#edit_dir|
        g:autolinker#tag ...................... |g:autolinker#tag|
        g:autolinker#fallback ................. |g:autolinker#fallback|
        g:autolinker#index .................... |g:autolinker#index|
        g:autolinker#cfile_gsub ............... |g:autolinker#cfile_gsub|
        g:autolinker#cfile_rstrip_rx .......... |g:autolinker#cfile_rstrip_rx|
        g:autolinker#find_ignore_rx ........... |g:autolinker#find_ignore_rx|
        g:autolinker#find_ignore_subst ........ |g:autolinker#find_ignore_subst|
        g:autolinker#fragment_rx .............. |g:autolinker#fragment_rx|
        prototype.WordLinks
        prototype.Dirname
        prototype.Rootname
        prototype.UninstallHotkey
        prototype.InstallHotkey
        prototype.ClearHighlight
        prototype.CfileGsubRx
        prototype.Highlight
        prototype.Edit
        prototype.SplitFilename
        prototype.GetCFile
        prototype.GetCWord
        prototype.CleanCWord
        prototype.CleanCFile
        prototype.IsInternalLink
        prototype.JumpInternalLink
        prototype.Jump_internal
        prototype.Jump_system
        prototype.Jump_def
        prototype.Jump_path
        prototype.Jump_tag
        prototype.Jump_fallback
        autolinker#Ensure ..................... |autolinker#Ensure()|
        autolinker#EnableBuffer ............... |autolinker#EnableBuffer()|
        autolinker#DisableBuffer .............. |autolinker#DisableBuffer()|
        autolinker#Balloon .................... |autolinker#Balloon()|
        autolinker#Jump ....................... |autolinker#Jump()|
        autolinker#EditInPath ................. |autolinker#EditInPath()|
        autolinker#NextLink ................... |autolinker#NextLink()|
        autolinker#FileSources ................ |autolinker#FileSources()|
        autolinker#CompleteFilename ........... |autolinker#CompleteFilename()|


========================================================================
plugin/autolinker.vim~

                                                    *g:autolinker_filetypes*
g:autolinker_filetypes         (default: ['text', 'txt', 'todo', 'todotxt', 'md', 'markdown', 'markdown.pandoc', 'tex', 'latex', 'help'])

                                                    *g:autolinker_patterns*
g:autolinker_patterns          (default: ['*.txt', '*.TXT', '*.md', '*.markdown'])

                                                    *g:autolinker_exclude_filetypes_rx*
g:autolinker_exclude_filetypes_rx (default: '')
    Don't enable autolinker for filetypes matching this |regexp| 
    even when the filename matches |g:autolinker_patterns|.

                                                    *:Albuffer*
:Albuffer
    Enable the autolinker plugin for the current buffer.

                                                    *:Algrep*
:Algrep
    Grep all files with prefixes defined in |g:autolinker#cfile_gsub|.
    This requires the trag_vim plugin to be installed.
    See also |:Tragsearch|.

                                                    *:Alfind*
:Alfind
    Find a file via |:Tragfiles|.


========================================================================
autoload/autolinker/ft_viki.vim~

prototype.CleanCFile

prototype.IsInternalLink

                                                    *autolinker#ft_viki#GetInstance()*
autolinker#ft_viki#GetInstance(prototype)


========================================================================
autoload/autolinker/prototype.vim~

prototype.Dispatch

prototype.BaseNameLinks

prototype.Dirname

prototype.Rootname

prototype.Highlight

prototype.Jump_system

prototype.Jump_def

prototype.Jump_path

prototype.Jump_tag

prototype.Jump_fallback


========================================================================
autoload/autolinker/cfile.vim~

                                                    *autolinker#cfile#New()*
autolinker#cfile#New(filename, autolinker)

prototype.CleanCFile

prototype.CFile

prototype.Pos


========================================================================
autoload/autolinker/ft_markdown.vim~

prototype.CleanCFile

prototype.JumpInternalLink

prototype.IsInternalLink

                                                    *autolinker#ft_markdown#GetInstance()*
autolinker#ft_markdown#GetInstance(prototype)


========================================================================
autoload/autolinker.vim~

                                                    *g:autolinker#use_highlight*
g:autolinker#use_highlight     (default: ['word', 'url', 'cfile_gsub'])
    Items that should be highlighted as hyperlinks:
    - word
    - url
    - cfile_gsub

                                                    *g:autolinker#url_rx*
g:autolinker#url_rx            (default: '\l\{2,6}://[-./[:alnum:]_~%#?&]\+')

                                                    *g:autolinker#types*
g:autolinker#types             (default: ['internal', 'system', 'path', 'def', 'tag', 'fallback'])
    Possible values (the order is significant):
    - internal (a document-internal reference)
    - system (URLs, non-text files etc. matching 
      |g:autolinker#system_rx|)
    - def (files in the current directory)
    - path (files in 'path')
    - tag (tags)
    - fallback (see |g:autolinker#fallback|)

                                                    *g:autolinker#nmap*
g:autolinker#nmap              (default: 'gz')
    Normal mode map.

                                                    *g:autolinker#imap*
g:autolinker#imap              (default: '<unique> <c-cr>')
    Insert mode map.

                                                    *g:autolinker#xmap*
g:autolinker#xmap              (default: g:autolinker#nmap)
    Visual mode map.

                                                    *g:autolinker#map_forward*
g:autolinker#map_forward       (default: ']'. g:autolinker#nmap)

                                                    *g:autolinker#map_backward*
g:autolinker#map_backward      (default: '['. g:autolinker#nmap)

                                                    *g:autolinker#map_options*
g:autolinker#map_options       (default: '<LocalLeader>a%s')
    Call this map with a count and a char (w = window, t = tab, s = 
    split, v = vertical split) to define where the destination should 
    be displayed.

    Let's assume |maplocalleader| is '\'. Then, e.g.,
      \asgz .... Open the destination in a split buffer
      2\awgz ... Open the destination in the second window

                                                    *g:autolinker#layout*
g:autolinker#layout            (default: {'*': ['tab drop', 'fnameescape'], 'w': ['<count>wincmd w'], 't': ['<count>tabn'], 's': ['<count>split'], 'v': ['vert <count>split']})
    Command for working with layouts.

                                                    *g:autolinker#edit_file*
g:autolinker#edit_file         (default: ['edit', 'fnameescape'])
    Command for opening files.

                                                    *g:autolinker#edit_dir*
g:autolinker#edit_dir          (default: ['Explore'])
    Command for opening directories

                                                    *g:autolinker#tag*
g:autolinker#tag               (default: 'tselect')

                                                    *g:autolinker#fallback*
g:autolinker#fallback          (default: ':call autolinker#EditInPath("%s"),gf,gx')
    A comma-separated list of fallback procedures.
    Normal command to run when everything else fails.
    If the command starts with ':', it is an ex command.
    branch to use.

    The arguments are format strings for |printf|. Any `%s` will be 
    replaced with |<cfile>|. A `%` must be written as `%%`.

    Possible values are:
    - gf
    - ':'. g:autolinker#edit_file[0] (if you want to create new files)

                                                    *g:autolinker#index*
g:autolinker#index             (default: '"index.". expand("%:e")')
    The value is an expression that evaluates to the filename.
    When opening directories, check whether a file with that name 
    exists. If so, open that file instead of the directory.

                                                    *g:autolinker#cfile_gsub*
g:autolinker#cfile_gsub        (default: [])
    A list of lists [RX, SUB, optional: {OPT => VALUE}] that are 
    applied to the |<cfile>| under the cursor. This can be used to 
    rewrite filenames and URLs, in order to implement e.g. interwikis.

    RX must be a |magic| |regexp|.

    Options:
      flags = 'g' ... flags for |substitute()|
      stop = 0 ...... Don't process other gsubs when this |regexp| 
                      matches

    Examples:
    ["^WIKI/", "~/MyWiki/"] .............. Redirect to wiki
    ["^todo://", "~/data/simpletask/"] ... Use todo pseudo-protocol as 
                                           used by the simpletasks app

                                                    *g:autolinker#cfile_rstrip_rx*
g:autolinker#cfile_rstrip_rx   (default: '[])},;:.]\s*')
    Strip a suffix matching this |regexp| from cfile.

                                                    *g:autolinker#find_ignore_rx*
g:autolinker#find_ignore_rx    (default: '')
    |autolinker#Find()| ignores substitutions from 
    |g:autolinker#cfile_gsub| that match this |regexp|.

                                                    *g:autolinker#find_ignore_subst*
g:autolinker#find_ignore_subst (default: '^\a\{2,}:')
    |autolinker#Find()| ignores substitutions from 
    |g:autolinker#cfile_gsub| that match this |regexp|.

                                                    *g:autolinker#fragment_rx*
g:autolinker#fragment_rx       (default: '\%(\d\+\|lnum=\d\+\|q=\S\+\)$')

prototype.WordLinks

prototype.Dirname

prototype.Rootname

prototype.UninstallHotkey

prototype.InstallHotkey

prototype.ClearHighlight

prototype.CfileGsubRx

prototype.Highlight

prototype.Edit

prototype.SplitFilename

prototype.GetCFile

prototype.GetCWord

prototype.CleanCWord

prototype.CleanCFile

prototype.IsInternalLink

prototype.JumpInternalLink

prototype.Jump_internal

prototype.Jump_system

prototype.Jump_def

prototype.Jump_path

prototype.Jump_tag

prototype.Jump_fallback

                                                    *autolinker#Ensure()*
autolinker#Ensure()

                                                    *autolinker#EnableBuffer()*
autolinker#EnableBuffer()

                                                    *autolinker#DisableBuffer()*
autolinker#DisableBuffer()

                                                    *autolinker#Balloon()*
autolinker#Balloon()

                                                    *autolinker#Jump()*
autolinker#Jump(mode)
    Jump to the destination descibed by the word under the cursor. Use one 
    of the following methods (see |g:autolinker#types|):
    1. Jump by definition (depends on filetype; by default all files in the 
       current directory)
    2. Jump to special URLs matching |g:autolinker#system_rx|
    3. Jump to a file in 'path' mathing the word under cursor
    4. Jump to a tag
    As last resort use |g:autolinker#fallback|

                                                    *autolinker#EditInPath()*
autolinker#EditInPath(cfile)

                                                    *autolinker#NextLink()*
autolinker#NextLink(n)

                                                    *autolinker#FileSources()*
autolinker#FileSources(opts)

                                                    *autolinker#CompleteFilename()*
autolinker#CompleteFilename(ArgLead, CmdLine, CursorPos)



vim:tw=78:fo=w2croql:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
