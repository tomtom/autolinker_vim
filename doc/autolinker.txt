*autolinker.txt*       Automatic links for any filetype (e.g. for a markdown/latex based wiki)
                Author: Thomas Link, micathom AT gmail com?subject=vim

Features:

- Call |:Autolinkbuffer| to enable autolinker for the current buffer 
  or check the definitions of |g:autolinker_filetypes| and 
  |g:autolinker_patterns|.
- Jump to files in the current directory
- Jump to files in 'path'
- Jump to tags
- Jump to file URLs
- Jump to line numbers (syntax: filename#123 where '123' is the line 
  number)
- Jump to the first occurrence of a string (syntax: 
  filename#q=STRING)
- Invoke URLs
- Highlight potential hyperlinks (doesn't work with all filetypes)
- Use a fallback command (e.g. create inexistent files)
- Special support for markdown (incl. link maps), viki files
- file URLs (an encoded URL starting with "file://") can be used to 
  circumvent encoding issues etc.

The default map is `gz` in normal and visual mode (see |g:autolinker#nmap| and 
|g:autolinker#xmap|). In insert mode, it is <c-cr> if the key is yet unmapped 
(see |g:autolinker#imap|).

Differences to |gf|:

- Customizable & extensible
- Supports several methods
- Highlight some potential hyperlinks if possible
- When there are multiple potential matches, users can select the right 
  file from a list


-----------------------------------------------------------------------
Install~

Either use the zip archive:

- Download the zip archive
- Extract it to `~/.vim/pack/tml/start/autolinker`

or install from github:

- Start a terminal
- Change the working directory to `~/.vim/pack/tml/start/`
- Type: `git clone https://github.com/tomtom/autolinker_vim`

NOTE: On Windows, ~/.vim might be ~/vimfiles. Please see 'runtimepath' 
for details.

This script requires tlib (vimscript #1863) to be installed -- see 
https://github.com/tomtom/tlib_vim.

========================================================================
Contents~

        g:autolinker_exclude_filetypes_rx ..... |g:autolinker_exclude_filetypes_rx|
        :Albuffer ............................. |:Albuffer|
        :Aledit ............................... |:Aledit|
        :Algrep ............................... |:Algrep|
        :Alfind ............................... |:Alfind|
        g:autolinker#use_highlight ............ |g:autolinker#use_highlight|
        g:autolinker#types .................... |g:autolinker#types|
        g:autolinker#hyperlinks_markup_rx ..... |g:autolinker#hyperlinks_markup_rx|
        g:autolinker#nmap ..................... |g:autolinker#nmap|
        g:autolinker#imap ..................... |g:autolinker#imap|
        g:autolinker#xmap ..................... |g:autolinker#xmap|
        g:autolinker#map_prefix ............... |g:autolinker#map_prefix|
        g:autolinker#layout ................... |g:autolinker#layout|
        g:autolinker#edit_file ................ |g:autolinker#edit_file|
        g:autolinker#edit_dir ................. |g:autolinker#edit_dir|
        g:autolinker#fallback ................. |g:autolinker#fallback|
        g:autolinker#index .................... |g:autolinker#index|
        g:autolinker#cfile_gsub ............... |g:autolinker#cfile_gsub|
        g:autolinker#cfile_rstrip_rx .......... |g:autolinker#cfile_rstrip_rx|
        g:autolinker#find_ignore_rx ........... |g:autolinker#find_ignore_rx|
        g:autolinker#find_ignore_subst ........ |g:autolinker#find_ignore_subst|
        autolinker#Jump ....................... |autolinker#Jump()|


------------------------------------------------------------------------
                                                    *plugin/autolinker.vim*
                                                    *g:autolinker_exclude_filetypes_rx*
g:autolinker_exclude_filetypes_rx (default: '')
    Don't enable autolinker for filetypes matching this |regexp| 
    even when the filename matches |g:autolinker_patterns|.

                                                    *:Albuffer*
:Albuffer
    Enable the autolinker plugin for the current buffer.

                                                    *:Aledit*
:Aledit
    " Edit/create a file in path.

                                                    *:Algrep*
:Algrep
    Grep all files with prefixes defined in |g:autolinker#cfile_gsub|.
    This requires the trag_vim plugin to be installed.
    See also |:Tragsearch|.

                                                    *:Alfind*
:Alfind
    Find a file via |:Tragfiles|.


------------------------------------------------------------------------
                                                    *autoload/autolinker.vim*
                                                    *g:autolinker#use_highlight*
g:autolinker#use_highlight     (default: ['word', 'url', 'cfile_gsub', 'hyperlinks_markup'])
    Items that should be highlighted as hyperlinks:
    - word
    - url
    - cfile_gsub
    - hyperlinks_markup

                                                    *g:autolinker#types*
g:autolinker#types             (default: ['internal', 'system', 'path', 'def', 'tag', 'fallback'])
    Possible values (the order is significant):
    - internal (a document-internal reference)
    - system (URLs, non-text files etc. matching 
      |g:autolinker#system_rx|)
    - def (files in the current directory)
    - path (files in 'path')
    - tag (tags)
    - fallback (see |g:autolinker#fallback|)

                                                    *g:autolinker#hyperlinks_markup_rx*
g:autolinker#hyperlinks_markup_rx (default: [...])
    Support for commonly used hyperlink markup:
    - [[LINK]], [[LINK|TEXT]], [[LINK][TEXT]]
    - [[TEXT > LINK]], [[TEXT >> LINK]]
    - [TEXT](LINK)
    - [url=LINK]TEXT[/url]
    - <a href="LINK">TEXT</a>

                                                    *g:autolinker#nmap*
g:autolinker#nmap              (default: 'gz')
    Normal mode map.

                                                    *g:autolinker#imap*
g:autolinker#imap              (default: '<unique> <c-cr>')
    Insert mode map.

                                                    *g:autolinker#xmap*
g:autolinker#xmap              (default: g:autolinker#nmap)
    Visual mode map.

                                                    *g:autolinker#map_prefix*
g:autolinker#map_prefix        (default: '<LocalLeader>a%s')
    A prefix for miscellaneous commands:

    / ... Scan all known files for the word under the cursor
    ? ... Search all known file names for the word under the cursor

    With a count and a char (w = window, t = tab, s = split, v = 
    vertical split) ... define where the destination should be 
    displayed.

    Let's assume |maplocalleader| is '\'. Then, e.g.,
      \asgz .... Open the destination in a split buffer
      2\awgz ... Open the destination in the second window

                                                    *g:autolinker#layout*
g:autolinker#layout            (default: {'*': {'cmd_dir': '%{CMD}', 'cmd_file': 'tab drop %{FILENAMEX}'}, 'w': {'cmd': '<count>wincmd w | %{CMD}'}, 't': {'cmd': '<count>tabn | %{CMD}'}, 's': {'cmd': '<count>split +%{CMD}'}, 'v': {'cmd': '<count>vsplit +%{CMD}'}})
    Command for working with layouts.

                                                    *g:autolinker#edit_file*
g:autolinker#edit_file         (default: {'cmd': 'edit %{FILENAMEX}'})
    Command for opening files.

                                                    *g:autolinker#edit_dir*
g:autolinker#edit_dir          (default: {'cmd': 'Explore %{FILENAMEX}'})
    Command for opening directories

                                                    *g:autolinker#fallback*
g:autolinker#fallback          (default: ':call autolinker#EditInPath("%s"),gf,gx')
    A comma-separated list of fallback procedures.
    Normal command to run when everything else fails.
    If the command starts with ':', it is an ex command.
    branch to use.

    The arguments are format strings for |printf|. Any `%s` will be 
    replaced with |<cfile>|. A `%` must be written as `%%`.

    Possible values are:
    - gf
    - ':'. g:autolinker#edit_file.cmd (if you want to create new files)

                                                    *g:autolinker#index*
g:autolinker#index             (default: '"index.". expand("%:e")')
    The value is an expression that evaluates to the filename.
    When opening directories, check whether a file with that name 
    exists. If so, open that file instead of the directory.

                                                    *g:autolinker#cfile_gsub*
g:autolinker#cfile_gsub        (default: [...])
    A list of lists that have either form
      ['RX', 'SUBST'], ['RX', 'SUBST', {OPTION => VALUE}]
    or
      ['RX', {'function': FUNCTION}].

    RX must be a |magic| |regexp|.

    In the first form, RX (a |regexp| |pattern|) is replaced with 
    SUBST in a filename. SUBST may contain group references. See 
    |sub-replace-special| for details.

    In the second form, FUNCTION is applied to the filename. The 
    filename usually is the |<cfile>| under the cursor.

    This can be used to rewrite filenames and URLs, in order to 
    implement e.g. interwikis.

    By default, the following prefixes are defined:

      DOI:  ... https://dx.doi.org/
      ISBN: ... https://www.worldcat.org/
      PMID: ... https://www.ncbi.nlm.nih.gov/pubmed/

    NOTE: If you don't like the double-colon as separator, you can use 
    wiki-style markup to use a blank as separator: `[[PMID 123]]`.

    Options:
      flags = 'g' ... flags for |substitute()|
      stop = 0 ...... Don't process other gsubs when this |regexp| 
                      matches

    The variable `g:autolinker#cfile_gsub_user` can be used to extend 
    the default value.

    Examples:
    ["^WIKI/", "~/MyWiki/"] .............. Redirect to wiki
    ["^todo://", "~/data/simpletask/"] ... Use todo pseudo-protocol as 
                                           used by the simpletasks app

                                                    *g:autolinker#cfile_rstrip_rx*
g:autolinker#cfile_rstrip_rx   (default: '[\])},;:.]\s*')
    Strip a suffix matching this |regexp| from cfile.

                                                    *g:autolinker#find_ignore_rx*
g:autolinker#find_ignore_rx    (default: '')
    |autolinker#Find()| ignores substitutions from 
    |g:autolinker#cfile_gsub| that match this |regexp|.

                                                    *g:autolinker#find_ignore_subst*
g:autolinker#find_ignore_subst (default: '^\a\{2,}:')
    |autolinker#Find()| ignores substitutions from 
    |g:autolinker#cfile_gsub| that match this |regexp|.

                                                    *autolinker#Jump()*
autolinker#Jump(mode)
    Jump to the destination descibed by the word under the cursor. Use one 
    of the following methods (see |g:autolinker#types|):
    1. Jump by definition (depends on filetype; by default all files in the 
       current directory)
    2. Jump to special URLs matching |g:autolinker#system_rx|
    3. Jump to a file in 'path' mathing the word under cursor
    4. Jump to a tag
    As last resort use |g:autolinker#fallback|



vim:tw=78:fo=w2croql:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
